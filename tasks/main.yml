---
# file: roles/docker-exim4/tasks/main.yaml

# set the selinux policy to enable log-rotation of the exim4 logs
- import_tasks: selinux-docker-log_rotate.yml

- name: docker_container.conf dir
  file:
    state: directory
    path: '{{ docker_restore_config_base_dir }}/{{ exim4_dv_name }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no

# *****************************************************************************
# Setup the directory for the datavolume for the syslog data

- name: syslog dir
  file:
    state: directory
    path: '{{ exim4_syslog_datavolume_dir }}'
    owner: root
    group: root
    mode: 'u=rwx,g=rx,o=rx'
    recurse: no
    setype: svirt_sandbox_file_t

- name: Create logrotate configuration for exim4
  template:
    src: dockercontainer.exim4.logrotate.j2
    dest: '/etc/logrotate.d/dockercontainer.{{ exim4_container_name }}'
  when: ansible_os_family == "RedHat"

# *****************************************************************************
# backup script part

- name: Assemble dir for backup scripts
  file:
    path: /usr/libexec/bacula/backup-scripts
    state: directory

- name: Create before_backup script
  template:
    src: before_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.before_backup.exim4

- name: Create after_backup script
  template:
    src: after_backup.j2
    dest: /usr/libexec/bacula/backup-scripts/55.after_backup.exim4

# *****************************************************************************
# update the Docker restore config

- name: exists - state file
  stat:
    path: '{{ docker_restore_config_base_dir }}/{{ exim4_dv_name }}/restore.date.txt'
    get_checksum: False
    get_md5: False
  register: st_exim4_restore

# *****************************************************************************
# Update or make the image.

- name: Checkout image repo
  git:
    repo: '{{ exim4_image_repo }}'
    version: master
    dest: '{{ docker_projects_dir }}/docker-exim4'

- name: build image
  docker_image:
    name: '{{ exim4_image_name }}'
    tag: '{{ docker_image_tag }}'
    path: '{{ docker_projects_dir }}/docker-exim4'
    force: "{{ docker_image_force_build }}"

# *****************************************************************************
# Create the data volumes

- name: data-volume container
  docker_volume:
    name: '{{ exim4_cv_name }}'

- name: data-volume container
  docker_volume:
    name: '{{ exim4_dv_name }}'

# *****************************************************************************
# Start the data container running

- name: start container
  docker_container:
    name: '{{ exim4_container_name }}'
    hostname: '{{ exim4_container_name }}'
    image: '{{ exim4_image_name }}:{{ docker_image_tag }}'
    networks:
      - name: '{{ docker_network_frontend }}'
        aliases:
          - '{{ exim4_hostname }}'
    ports: '{{ exim4_port_args }}'
    purge_networks: true
    restart_policy: '{{ docker_restart_policy }}'
    state: started
    volumes:
      - '{{ exim4_cv_name }}:/etc/exim4:z'
      - '{{ exim4_dv_name }}:/var/spool/exim4:z'
      - '{{ openssl_dv_name }}:/etc/ssl/private:z'

# *****************************************************************************
# restore?

- include_tasks: restore.yml
  when: st_exim4_restore.stat.exists == False

# *****************************************************************************
# Email accounts

- name: populate email passwords
  shell: 'docker run --rm --volumes-from {{ exim4_dv_name }} {{ exim4_image_name }}:{{ docker_image_tag }} add_account {{ item.value.user }} "{{ item.value.password }}"'
  with_dict: '{{ email_accounts }}'
